// image-utils.ts
import imageCompression from 'browser-image-compression';

/**
 * H√†m n√©n ·∫£nh d√πng browser-image-compression
 * @param file File ·∫£nh g·ªëc t·ª´ input[type="file"]
 * @param maxSizeMB Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc sau khi n√©n (MB)
 * @param maxWidthOrHeight Chi·ªÅu r·ªông ho·∫∑c chi·ªÅu cao t·ªëi ƒëa
 */
export async function compressImage(
  file: File,
  maxSizeMB: number = 1,
  maxWidthOrHeight: number = 1920
): Promise<File> {
  const originalSizeMB = (file.size / 1024 / 1024).toFixed(2);
  console.log('üì∑ Original image size:', originalSizeMB, 'MB');

  const options = {
    maxSizeMB,
    maxWidthOrHeight,
    useWebWorker: true,
  };

  try {
    const compressedBlob = await imageCompression(file, options);
    const compressedSizeMB = (compressedBlob.size / 1024 / 1024).toFixed(2);
    console.log('‚úÖ Compressed image size:', compressedSizeMB, 'MB');

    // L·∫•y ƒëu√¥i file g·ªëc
    const extension = file.name.split('.').pop() || 'jpg';
    const newFileName = `compressed_${Date.now()}.${extension}`;

    // T·∫°o l·∫°i File v·ªõi t√™n m·ªõi
    const compressedFile = new File([compressedBlob], newFileName, {
      type: compressedBlob.type,
      lastModified: Date.now(),
    });

    return compressedFile;
  } catch (error) {
    console.error('L·ªói khi n√©n ·∫£nh:', error);
    return file; // fallback n·∫øu l·ªói
  }
}
