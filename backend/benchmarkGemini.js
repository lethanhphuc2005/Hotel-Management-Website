const { GoogleGenerativeAI } = require("@google/generative-ai");
require("dotenv").config();

const PROMPT = `
  T√¥i mu·ªën ƒë·∫∑t ph√≤ng cho 2 ng∆∞·ªùi l·ªõn, 1 tr·∫ª em t·ª´ 10/7 ƒë·∫øn 12/7. G·ª£i √Ω gi√∫p t√¥i lo·∫°i ph√≤ng ph√π h·ª£p, c√≥ view ƒë·∫πp, ti·ªán nghi t·ªët v√† trong t·∫ßm gi√° kho·∫£ng 1 tri·ªáu ƒë·∫øn 2 tri·ªáu m·ªôt ƒë√™m.
  Tr·∫£ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON c√≥ room_ids.
  `;

const testModels = ["gemini-2.0-flash", "gemini-2.5-flash"];

async function benchmark(modelName) {
  const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
  const model = genAI.getGenerativeModel({ model: modelName });

  const start = Date.now();
  const result = await model.generateContent(PROMPT);
  const duration = Date.now() - start;

  const output = result.response.text();

  return {
    model: modelName,
    durationMs: duration,
    output,
  };
}

async function run() {
  for (const modelName of testModels) {
    try {
      console.log(`\nüöÄ Testing model: ${modelName}`);
      const { durationMs, output } = await benchmark(modelName);
      console.log(`‚è± Duration: ${durationMs}ms`);
      console.log("üì§ Response:\n", output.slice(0, 1000), "..."); // in tr∆∞·ªõc 1000 k√Ω t·ª±
    } catch (err) {
      console.error(`‚ùå Error with ${modelName}:`, err.message);
    }
  }
}

run();
