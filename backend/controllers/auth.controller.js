const User = require("../models/user.model");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const mailSender = require("../helpers/mail.sender");
const { verificationEmail } = require("../config/mail");



// X√ÅC MINH OTP
exports.verifyOtp = async (req, res) => {
  const { email, otp } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

  if ((user.verification_code || "").trim() !== (otp || "").trim()) {
  return res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá" });
}

    user.is_verified = true;
    user.verification_code = null;
    await user.save();

    const token = jwt.sign(
      { id: user._id }, // ‚úÖ Ch·ªâ truy·ªÅn id
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );

    res.status(200).json({ message: "X√°c minh OTP th√†nh c√¥ng", token });
  } catch (err) {
    console.error("‚ùå L·ªói x√°c minh OTP:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};
// G·ª¨I L·∫†I OTP
exports.resendOtp = async (req, res) => {
  const { email } = req.body;

  if (!email) return res.status(400).json({ message: "Email l√† b·∫Øt bu·ªôc" });

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    user.verification_code = otp;
    await user.save();

    console.log("üîÅ G·ª≠i l·∫°i OTP cho:", email);
    console.log("OTP m·ªõi:", otp);
    console.log("Th·ªùi gian:", new Date());

    res.status(200).json({ message: "ƒê√£ g·ª≠i l·∫°i OTP th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói g·ª≠i l·∫°i OTP:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};
exports.resendOtp = async (req, res) => {
  const { email } = req.body;

  if (!email) return res.status(400).json({ message: "Email l√† b·∫Øt bu·ªôc" });

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    if (user.is_verified) {
      return res.status(400).json({ message: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c minh." });
    }

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    user.verification_code = otp;
    await user.save();

    // G·ª≠i email
    try {
      await mailSender({
        email: user.email,
        subject: verificationEmail.subject,
        html: verificationEmail.html(otp),
      });
    } catch (mailError) {
      return res.status(500).json({
        message: "G·ª≠i email th·∫•t b·∫°i",
        error: mailError.message,
      });
    }

    console.log("üîÅ G·ª≠i l·∫°i OTP:", otp, "cho:", email, "l√∫c:", new Date());
    res.status(200).json({ message: "ƒê√£ g·ª≠i l·∫°i OTP th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói g·ª≠i l·∫°i OTP:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
}
// G·ª¨I OTP ƒê·ªÇ ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U
exports.forgotPassword = async (req, res) => {
  const { email } = req.body;

  if (!email) return res.status(400).json({ message: "Email l√† b·∫Øt bu·ªôc" });

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    user.verification_code = otp;
    await user.save();

    // G·ª≠i email
    try {
      await mailSender({
        email: user.email,
        subject: "Kh√¥i ph·ª•c m·∫≠t kh·∫©u",
        html: `<h3>M√£ OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u:</h3><p style="font-size: 20px;"><b>${otp}</b></p>`,
      });
    } catch (mailError) {
      return res.status(500).json({ message: "G·ª≠i email th·∫•t b·∫°i", error: mailError.message });
    }

    console.log("üì© G·ª≠i OTP reset pass:", otp, "cho:", email, "l√∫c:", new Date());
    res.status(200).json({ message: "ƒê√£ g·ª≠i m√£ OTP ƒë·∫øn email" });
  } catch (err) {
    console.error("‚ùå L·ªói forgotPassword:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};
exports.verifyResetOtp = async (req, res) => {
  const { email, otp } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    if ((user.verification_code || "").trim() !== (otp || "").trim()) {
      return res.status(400).json({ message: "OTP kh√¥ng ƒë√∫ng" });
    }

    res.status(200).json({ message: "OTP ch√≠nh x√°c, ti·∫øp t·ª•c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u" });
  } catch (err) {
    console.error("‚ùå L·ªói verifyResetOtp:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};
exports.resetPassword = async (req, res) => {
  const { email, newPassword } = req.body;

  if (!email || !newPassword)
    return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u m·ªõi" });

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    const hashed = await bcrypt.hash(newPassword, 10);
    user.password = hashed;
    user.verification_code = null; // clear m√£
    await user.save();

    res.status(200).json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói resetPassword:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};
