"use client";
import { useData } from "@/hooks/useData";
import styles from "./roomDetail.module.css";
import React, { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import { Swiper, SwiperSlide } from "swiper/react";
import { Autoplay, Navigation, Thumbs, Pagination } from "swiper/modules";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/thumbs";
import "swiper/css/pagination";
import { Mousewheel } from "swiper/modules";
import style from "./roomDetail.module.css"; // ƒê·∫£m b·∫£o ƒë√∫ng ƒë∆∞·ªùng d·∫´n
import axios from "axios";

interface User {
  _id: string;
  first_name: string;
  last_name: string;
  email: string;
  phone_number: string;
}
interface Comment {
  _id: string;
  room_class_id: string;
  parent_id: string | null;
  user_id: User;
  content: string;
  createdAt: string; // Ng√†y t·∫°o b√¨nh lu·∫≠n
  updatedAt: string; // Ng√†y c·∫≠p nh·∫≠t b√¨nh lu·∫≠n
  rating?: number; // th√™m d√≤ng n√†y
}

// ƒê·ªãnh nghƒ©a interface cho review
interface Review {
  author: string;
  rating: number;
  date: string;
  content: string;
  // Th√™m c√°c tr∆∞·ªùng kh√°c n·∫øu c√≥
}

interface FeatureItem {
  _id: string;
  room_class_id: string;
  feature_id: {
    _id: string;
    name: string;
    description: string;
    image: string; // N·∫øu c√≥ icon, ƒë∆∞·ªùng d·∫´n ·∫£nh ho·∫∑c t√™n icon
  };
}
const RoomDetail = () => {
  const params = useParams();
  const roomId = params.roomId as string; // roomId ch√≠nh l√† id tr√™n URL
  const { roomclass } = useData();
  const [showFAQModal, setShowFAQModal] = useState(false);
  const [showAskModal, setShowAskModal] = useState(false);
  const [question, setQuestion] = useState("");
  const [openFAQIndex, setOpenFAQIndex] = useState<{
    col: number;
    idx: number;
  } | null>(null);
  const [thumbsSwiper, setThumbsSwiper] = useState<any>(null);
  const [roomClasses, setRoomClasses] = useState([]);
  const [reviews, setReviews] = useState<Review[]>([]); // Th√™m state cho reviews
  const [features, setFeatures] = useState<FeatureItem[]>([]); // Th√™m state cho features
  // const [comments, setComments] = useState<Comment[]>([]);
  // console.log(comments)

  // L·∫•y room nh∆∞ c≈©
  const room = roomclass.find((item) => item._id === roomId);
  const images = room?.images || [];
  const comments = room?.comments || []; // L·∫•y comments t·ª´ room
  console.log("comments:", comments);
  const faqColumns = [
    [
      {
        question: "H·ªç c√≥ ph·ª•c v·ª• b·ªØa s√°ng kh√¥ng?",
        answer: "Ch·ªó ngh·ªâ c√≥ ph·ª•c v·ª• b·ªØa s√°ng v·ªõi th·ª±c ƒë∆°n ƒëa d·∫°ng.",
      },
      {
        question: "Ch·ªó ngh·ªâ c√≥ d·ªãch v·ª• ƒë∆∞a ƒë√≥n s√¢n bay kh√¥ng?",
        answer: "C√≥, b·∫°n c√≥ th·ªÉ ƒë·∫∑t d·ªãch v·ª• ƒë∆∞a ƒë√≥n s√¢n bay v·ªõi ph·ª• ph√≠.",
      },
      {
        question: "Ch·ªó ngh·ªâ c√≥ spa kh√¥ng?",
        answer: "Ch·ªó ngh·ªâ c√≥ d·ªãch v·ª• spa cho kh√°ch.",
      },
      {
        question: "Ch·ªó ngh·ªâ c√≥ nh√† h√†ng kh√¥ng?",
        answer: "C√≥ nh√† h√†ng ph·ª•c v·ª• c√°c m√≥n ƒÉn ƒë·ªãa ph∆∞∆°ng v√† qu·ªëc t·∫ø.",
      },
      {
        question: "Ch·ªó ngh·ªâ c√≥ ch√≠nh s√°ch Wi-Fi ra sao?",
        answer: "Wi-Fi mi·ªÖn ph√≠ to√†n b·ªô khu√¥n vi√™n.",
      },
    ],
    [
      {
        question: "H·ªì b∆°i c√≥ ho·∫°t ƒë·ªông kh√¥ng?",
        answer: "H·ªì b∆°i m·ªü c·ª≠a t·ª´ 6h ƒë·∫øn 22h h√†ng ng√†y.",
      },
      {
        question: "T√¥i c√≥ th·ªÉ ƒë·∫∑t ph√≤ng gia ƒë√¨nh ·ªü ƒë√¢y kh√¥ng?",
        answer: "C√≥ ph√≤ng gia ƒë√¨nh v·ªõi nhi·ªÅu l·ª±a ch·ªçn.",
      },
      {
        question: "Ph√≤ng gym c√≥ ho·∫°t ƒë·ªông kh√¥ng?",
        answer: "Ph√≤ng gym ho·∫°t ƒë·ªông 24/7.",
      },
      {
        question: "Ch·ªó ngh·ªâ c√≥ ch·ªó ƒë·ªó xe kh√¥ng?",
        answer: "C√≥ b√£i ƒë·ªó xe mi·ªÖn ph√≠ cho kh√°ch.",
      },
      {
        question: "C√≥ ti·ªán nghi BBQ kh√¥ng?",
        answer: "C√≥ khu v·ª±c BBQ ngo√†i tr·ªùi.",
      },
    ],
  ];

  // Kh√≥a cu·ªôn body khi m·ªü modal
  useEffect(() => {
    if (showFAQModal || showAskModal) {
      document.body.classList.add("overflow-hidden");
    } else {
      document.body.classList.remove("overflow-hidden");
    }
    // Cleanup khi component unmount
    return () => document.body.classList.remove("overflow-hidden");
  }, [showFAQModal, showAskModal]);

  const handleBackdropClick = (e: React.MouseEvent<HTMLDivElement>) => {
    if (e.target === e.currentTarget) setShowFAQModal(false);
  };

  useEffect(() => {
    fetch("http://localhost:8000/v1/room-class/user")
      .then((res) => res.json())
      .then((data) => {
        console.log(data); // Xem c·∫•u tr√∫c d·ªØ li·ªáu tr·∫£ v·ªÅ
        // X·ª≠ l√Ω ti·∫øp ·ªü b∆∞·ªõc 2
      });
  }, []);

  useEffect(() => {
    // Gi·∫£ s·ª≠ b·∫°n c√≥ API ƒë·ªÉ l·∫•y ƒë√°nh gi√° c·ªßa ph√≤ng
    axios
      .get(`http://localhost:8000/v1/reviews?roomId=${roomId}`)
      .then((res: any) => setReviews(res.data.data))
      .catch((err) => console.error(err));
  }, [roomId]);

  useEffect(() => {
    // L·∫•y danh s√°ch ti·ªán √≠ch c·ªßa ph√≤ng
    axios
      .get(`http://localhost:8000/v1/room-class/${roomId}/features`)
      .then((res: any) => setFeatures(res.data.data))
      .catch((err) => console.error(err));
  }, [roomId]);

 

  const ratedComments: Comment[] = comments
  .filter((cmt) => cmt.rating !== undefined && cmt.rating !== null)
  .map((cmt) => ({
    ...cmt,
    parent_id: cmt.parent_id ?? null, // ƒë·∫£m b·∫£o kh√¥ng undefined
  })) as Comment[];
  const ratingCount: number = ratedComments.length;
  const avgRating: number =
    ratingCount === 0
      ? 0
      : ratedComments.reduce((sum, cmt) => sum + (cmt.rating ?? 0), 0) /
        ratingCount;

  if (!room) return <div>Room not found</div>;

  return (
    <div className={styles.pageContainer}>
      <div className={styles.container}>
        <div className={styles.imageContainer}>
          <div className={styles.swiperContainer}>
            <div className={styles.mainWrapper}>
              <Swiper
                loop={true}
                autoplay={{ delay: 5000 }}
                modules={[Autoplay, Thumbs, Pagination]}
                pagination={{ clickable: true }} // B·∫≠t c·ª•c tr√≤n chuy·ªÉn slide
                className={styles.mainSwiper}
                thumbs={{ swiper: thumbsSwiper }}
              >
                {images.map((img, index) => (
                  <SwiperSlide key={index}>
                    <img
                      src={`/img/${img.url}`}
                      alt={`Room Image ${index + 1}`}
                      className={styles.mainImage}
                    />
                  </SwiperSlide>
                ))}
              </Swiper>
            </div>
            <div className={styles.thumbWrapper}>
              <Swiper
                onSwiper={setThumbsSwiper}
                direction="vertical"
                spaceBetween={10}
                slidesPerView={5}
                freeMode={true}
                watchSlidesProgress={true}
                modules={[Thumbs, Mousewheel]}
                mousewheel={true}
                className={styles.thumbSwiper}
              >
                {images.map((img, index) => (
                  <SwiperSlide key={index}>
                    <img
                      src={`/img/${img.url}`}
                      alt={`Thumb ${index + 1}`}
                      className={styles.thumbImage}
                    />
                  </SwiperSlide>
                ))}
              </Swiper>
            </div>
          </div>
        </div>
        <h1 className={styles.title}>{room.name}</h1>
        <div className={styles.details}>
          <div className={styles.leftSection}>
            {/* <p className={styles.roomNumber}>Ph√≤ng s·ªë 01</p> */}
            <p className={styles.roomInfo}>
              {room
                ? `${room.bed_amount} gi∆∞·ªùng - S·ª©c ch·ª©a ${
                    room.capacity
                  } kh√°ch | View: ${room.view} | Tr·∫°ng th√°i: ${
                    room.status ? "C√≤n ph√≤ng" : "H·∫øt ph√≤ng"
                  }`
                : ""}
              <span className={styles.availableIcon}>
                <i className="bi bi-check-circle"></i>
              </span>
              <br />
              {room.description}
            </p>
            <div className={styles.rating}>
              <span className={styles.ratingIcons}>
                üåø ƒê∆∞·ª£c kh√°ch y√™u th√≠ch üåø
              </span>
              <span className={styles.ratingText}>
                Kh√°ch ƒë√°nh gi√° ƒë√¢y l√† m·ªôt trong nh·ªØng cƒÉn ph√≤ng ƒë∆∞·ª£c y√™u th√≠ch
                nh·∫•t tr√™n The Moon
              </span>
              <div className={styles.ratingScoreWrapper}>
                <span className={styles.ratingScore}>
                  {avgRating === 0 ? 0 : avgRating.toFixed(1)}/5
                </span>
                <span className={styles.stars}>
                  {"‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ".slice(0, Math.round(avgRating))}
                  {"‚òÜ‚òÜ‚òÜ‚òÜ‚òÜ".slice(0, 5 - Math.round(avgRating))}
                </span>
              </div>
              <div className={styles.ratingCountWrapper}>
                <span className={styles.ratingCount}>{ratingCount}</span>
                <span className={styles.feadback}>ƒê√°nh gi√°</span>
              </div>
            </div>
            <br />
            <p className={styles.sectionTitle}>GI·ªöI THI·ªÜU V·ªÄ CH·ªñ N√ÄY</p>
            <p className={styles.sectionText}>
              M·ªôt t·ªï nh·ªè ƒë·ªÉ ngh·ªâ ng∆°i sau nh·ªØng ng√†y b·∫≠n r·ªôn l√†m vi·ªác, mua s·∫Øm
              ho·∫∑c gh√© thƒÉm c√°c b·∫£o t√†ng v√† ph√≤ng tr∆∞ng b√†y ·ªü Milan. Ph√≤ng ·∫•m
              c√∫ng v√† ƒë·∫ßy m√†u s·∫Øc v·ªõi kh·∫£ nƒÉng s·ª≠ d·ª•ng nh√† b·∫øp, m√°y gi·∫∑t v√† m√°y
              s·∫•y, wifi. C√°ch Brera, Khu ph·ªë T√†u v√† t√†u ƒëi·ªán ng·∫ßm xanh v√† hoa c√†
              hai ph√∫t ƒëi b·ªô.
            </p>
          </div>

          <div className={styles.rightSection}>
            <div className={styles.price}></div>
            <div className={styles.infoSection}>
              <p className={styles.priceText}>
                {room ? `${room.price.toLocaleString()} VNƒê / ƒê√™m` : ""}
              </p>
              <div className={styles.bookingDetails}>
                <div className={styles.checkInOutRow}>
                  <div className={styles.bookingItem}>
                    <label>NH·∫¨N PH√íNG</label>
                    <input type="date" className={styles.dateInput} />
                  </div>
                  <div className={styles.bookingItem}>
                    <label>TR·∫¢ PH√íNG</label>
                    <input type="date" className={styles.dateInput} />
                  </div>
                </div>
                <div className={styles.guestRow}>
                  <div className={styles.bookingItem}>
                    <label className={styles.note}>KH√ÅCH</label>
                    <select className={styles.guestSelect}>
                      <option value="1">1 kh√°ch</option>
                      <option value="2">2 kh√°ch</option>
                      <option value="3">3 kh√°ch</option>
                      <option value="4">4 kh√°ch</option>
                    </select>
                  </div>
                </div>
              </div>
              <button className={styles.bookButton}>ƒê·∫∂T</button>
            </div>
          </div>
        </div>
        <hr className={styles.line} />

        <div className={styles.additionalInfo}>
          <h3 className={styles.sectionTitle}>N∆†I N√ÄY C√ì NH·ªÆNG G√å CHO B·∫†N</h3>

          {room.features && room.features.length > 0 ? (
            <div className={styles.highlightsSection}>
              <div className={styles.iconList}>
                {room.features.map((item) => (
                  <div key={item._id} className={styles.iconItem}>
                    <span className={styles.icon}>
                      {item.feature_id?.image ? (
                        <i className={item.feature_id.image}></i>
                      ) : (
                        <i></i> // icon m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
                      )}
                    </span>
                    {item.feature_id?.name || "Kh√¥ng c√≥ t√™n"}
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div>Ch∆∞a c√≥ ti·ªán √≠ch n√†o.</div>
          )}

          <hr className={styles.line} />
          <div className={styles.reviewsSection}>
            <h3 className={styles.sectionTitle}>
              NH·ªÆNG ƒê√ÅNH GI√Å C·ª¶A KH√ÅCH H√ÄNG
            </h3>
            <div className={styles.reviewContainer}>
              {reviews.length > 0 ? ( // Ki·ªÉm tra xem c√≥ ƒë√°nh gi√° n√†o kh√¥ng
                reviews.map((review, idx) => (
                  <div key={idx} className={styles.reviewItem}>
                    <div className={styles.reviewHeader}>
                      <img
                        src="/img/about.jpg"
                        alt="avatar"
                        className={styles.reviewAvatar}
                      />
                      <div>
                        <p className={styles.reviewAuthor}>{review.author}</p>
                        <p className={styles.reviewRating}>
                          {"‚òÖ".repeat(review.rating)}
                          {"‚òÜ".repeat(5 - review.rating)}{" "}
                          <span className={styles.reviewDate}>
                            {new Date(review.date).toLocaleDateString("vi-VN")}
                          </span>
                        </p>
                      </div>
                    </div>

                    <p className={styles.reviewText}>{review.content}</p>
                  </div>
                ))
              ) : (
                <p className={styles.noReviews}>
                  Ch∆∞a c√≥ ƒë√°nh gi√° n√†o cho ph√≤ng n√†y.
                </p>
              )}
            </div>
          </div>
          {/* Th·∫Øc m·∫Øc c·ªßa du kh√°ch - Bootstrap */}
          <section className="my-4">
            <h3 className="fw-bold mb-4" style={{ fontSize: "20px" }}>
              TH·∫ÆC M·∫ÆC C·ª¶A DU KH√ÅCH
            </h3>
            <div className="row h-100">
              <div className="col-md-4">
                <div
                  className="border rounded-3 p-4 d-flex flex-column align-items-center justify-content-center shadow-sm bg-black"
                  style={{ height: "316px" }}
                >
                  <div className="fw-bold fs-5 text-center mb-3">
                    B·∫°n v·∫´n ƒëang t√¨m ki·∫øm?
                  </div>
                  <button
                    className={`mb-3 ${styles.btnAsk}`}
                    onClick={() => setShowAskModal(true)}
                  >
                    ƒê·∫∑t c√¢u h·ªèi
                  </button>
                  <div
                    className="text-white text-center"
                    style={{ fontSize: "15px" }}
                  >
                    Ch√∫ng t√¥i c√≥ th·ªÉ gi·∫£i ƒë√°p t·ª©c th√¨ h·∫ßu h·∫øt c√°c th·∫Øc m·∫Øc
                  </div>
                  <button
                    type="button"
                    className="btn btn-link mt-2 text-decoration-none"
                    style={{ color: "#FAB320" }}
                    onClick={() => setShowFAQModal(true)}
                  >
                    Xem c√°c c√¢u b√¨nh lu·∫≠n
                  </button>
                </div>
              </div>
              {/* Th√™m 2 box FAQ nh∆∞ h√¨nh */}
              <div className="col-md-8">
                <div className="row">
                  {faqColumns.map((col, colIdx) => (
                    <div className="col-md-6 mb-3" key={colIdx}>
                      <div className="border rounded-3 p-3 bg-black">
                        <ul className="list-unstyled mb-0">
                          {col.map((item, idx) => (
                            <li
                              key={idx}
                              className={`d-flex align-items-center py-3${
                                idx < col.length - 1 ? " border-bottom" : ""
                              }`}
                              style={{
                                flexDirection: "column",
                                cursor: "pointer",
                              }}
                              onClick={() =>
                                setOpenFAQIndex(
                                  openFAQIndex &&
                                    openFAQIndex.col === colIdx &&
                                    openFAQIndex.idx === idx
                                    ? null
                                    : { col: colIdx, idx }
                                )
                              }
                            >
                              <div className="w-100 d-flex align-items-center">
                                <i className="bi bi-chat-dots me-2"></i>
                                <span>{item.question}</span>
                                <span className="ms-auto">
                                  <i
                                    className={`bi bi-chevron-${
                                      openFAQIndex &&
                                      openFAQIndex.col === colIdx &&
                                      openFAQIndex.idx === idx
                                        ? "down"
                                        : "right"
                                    }`}
                                  ></i>
                                </span>
                              </div>
                              {openFAQIndex &&
                                openFAQIndex.col === colIdx &&
                                openFAQIndex.idx === idx && (
                                  <div
                                    className={`${styles.faqAnswer} ${
                                      openFAQIndex &&
                                      openFAQIndex.col === colIdx &&
                                      openFAQIndex.idx === idx
                                        ? styles.open
                                        : ""
                                    } w-100 mt-2 text-secondary`}
                                    style={{
                                      fontSize: 14,
                                      background: "#181818",
                                      borderRadius: 6,
                                      padding: "10px 12px",
                                    }}
                                  >
                                    {item.answer}
                                  </div>
                                )}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
            {/* FAQ Modal */}
            {showFAQModal && (
              <>
                <div
                  className={styles.faqSidebarBackdrop}
                  onClick={handleBackdropClick}
                ></div>
                <div
                  className={styles.faqSidebarModal}
                  onClick={(e) => e.stopPropagation()}
                >
                  <div className="modal-header">
                    <h5 className="modal-title fw-bold">
                      B√¨nh lu·∫≠n c·ªßa kh√°ch h√†ng
                    </h5>
                    <button
                      type="button"
                      className="btn-close btn-close-white"
                      onClick={() => setShowFAQModal(false)}
                    ></button>
                  </div>
                  <div className={`modal-body ${styles.custommodalbody}`}>
                    {comments.length === 0 && <div>Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o</div>}
                    {comments.map((cmt) => (
                      <div key={cmt._id} style={{ marginBottom: 16 }}>
                        <b>
                          {cmt.user_id?.first_name} {cmt.user_id?.last_name}
                        </b>
                        <div>N·ªôi dung: {cmt.content}</div>
                        <div>
                          Th·ªùi gian:{" "}
                          {new Date(cmt.createdAt).toLocaleString("vi-VN")}
                        </div>
                        <hr />
                      </div>
                    ))}
                  </div>
                  <div
                    className="modal-footer p-3 border-top"
                    style={{ height: "80px" }}
                  >
                    <button
                      className="w-100 border-0 text-black rounded"
                      style={{ backgroundColor: "#FAB320", height: "45px" }}
                      onClick={() => setShowAskModal(true)}
                    >
                      ƒê·∫∑t c√¢u h·ªèi
                    </button>
                  </div>
                </div>
              </>
            )}
            {/* ƒê·∫∑t c√¢u h·ªèi Modal */}
            {showAskModal && (
              <>
                <div
                  className={styles.faqSidebarBackdrop}
                  onClick={(e) => {
                    if (e.target === e.currentTarget) setShowAskModal(false);
                    setShowFAQModal(false);
                  }}
                ></div>
                <div
                  className={styles.faqSidebarModal}
                  onClick={(e) => e.stopPropagation()}
                >
                  <div className="modal-header border-0 pb-0">
                    <h5 className="modal-title fw-bold mb-4">ƒê·∫∑t c√¢u h·ªèi</h5>
                    <button
                      type="button"
                      className="btn-close btn-close-white"
                      onClick={() => setShowAskModal(false)}
                    ></button>
                  </div>
                  <div className="modal-body">
                    <div className="mb-2 fw-semibold">
                      C√¢u h·ªèi c·ªßa b·∫°n <span style={{ color: "red" }}>*</span>
                    </div>
                    <textarea
                      className={`form-control mb-2 text-white ${styles.customTextarea}`}
                      rows={3}
                      maxLength={300}
                      placeholder="v√≠ d·ª•: c√≥ d·ªãch v·ª• d·ªçn ph√≤ng kh√¥ng?"
                      value={question}
                      onChange={(e) => setQuestion(e.target.value)}
                    />
                    <div
                      className="mb-2 text-end"
                      style={{ fontSize: 13, color: "#888" }}
                    >
                      {300 - question.length} k√Ω t·ª±
                    </div>
                    <div className="mb-3" style={{ fontSize: 15 }}>
                      <i className="bi bi-info-circle me-2"></i>
                      N·∫øu ch√∫ng t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n ngay, b·∫°n
                      c√≥ th·ªÉ chuy·ªÉn c√¢u h·ªèi ƒë·∫øn ch·ªó ngh·ªâ. Vui l√≤ng{" "}
                      <a href="#" style={{ color: "#FAB320" }}>
                        tu√¢n th·ªß h∆∞·ªõng d·∫´n c·ªßa ch√∫ng t√¥i
                      </a>{" "}
                      v√† kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn b·∫•t k·ª≥ th√¥ng tin c√° nh√¢n n√†o.
                    </div>
                  </div>
                  <div
                    className="modal-footer p-3 border-top"
                    style={{ height: "80px" }}
                  >
                    <button
                      className="w-100 border-0 text-black rounded"
                      style={{ backgroundColor: "#FAB320", height: "45px" }}
                      disabled={!question.trim()}
                      onClick={() => {
                        // X·ª≠ l√Ω g·ª≠i c√¢u h·ªèi ·ªü ƒë√¢y
                        setShowAskModal(false);
                        setQuestion("");
                      }}
                    >
                      ƒê·∫∑t c√¢u h·ªèi
                    </button>
                  </div>
                </div>
              </>
            )}
          </section>
          <br />
          <hr className={styles.line1} />
          <div className={styles.knowSection}>
            <h3 className={styles.sectionTitle}>NH·ªÆNG ƒêI·ªÄU C·∫¶N BI·∫æT</h3>
            <div className={styles.knowList}>
              <div className={styles.knowColumn}>
                <h4 className={styles.columnTitle}>N·ªôi quy ph√≤ng</h4>
                <div className={styles.knowItem}>Nh·∫≠n ph√≤ng: 14:00 - 22:00</div>
                <div className={styles.knowItem}>Tr·∫£ ph√≤ng: 12:00</div>
                <div className={styles.knowItem}>T·ªëi ƒëa 4 kh√°ch</div>
                <div className={styles.knowItem}>Kh√¥ng h√∫t thu·ªëc</div>
                <div className={styles.knowItem}>Kh√¥ng ƒë∆∞·ª£c mang th√∫ c∆∞ng</div>
              </div>
              <div className={styles.knowColumn}>
                <h4 className={styles.columnTitle}>An to√†n v√† ch·ªó ·ªü</h4>
                <div className={styles.knowItem}>C√≥ m√°y b√°o kh√≥i</div>
                <div className={styles.knowItem}>M√°y ph√°t hi·ªán kh√≠ CO</div>
                <div className={styles.knowItem}>
                  C√≥ s∆° ƒë·ªì tho√°t hi·ªÉm sau c·ª≠a ph√≤ng
                </div>
                <div className={styles.knowItem}>
                  C·ª≠a s·ªï v√† ban c√¥ng ƒë∆∞·ª£c l·∫Øp an to√†n
                </div>
                <div className={styles.knowItem}>
                  H√†nh l√Ω ƒë∆∞·ª£c ƒë·∫∑t camera an ninh 24/7
                </div>
              </div>
              <div className={styles.knowColumn}>
                <h4 className={styles.columnTitle}>Ch√≠nh s√°ch h·ªßy</h4>
                <div className={styles.knowItem}>
                  Mi·ªÖn ph√≠ h·ªßy trong v√≤ng 48 gi·ªù sau khi ƒë·∫∑t
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RoomDetail;
